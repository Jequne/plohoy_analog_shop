from fastapi import APIRouter, Depends, Request, Form, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse, RedirectResponse
from sqlalchemy.future import select
import bcrypt
from sqlalchemy.ext.asyncio import AsyncSession
from starlette.templating import Jinja2Templates
from datetime import datetime, timedelta
import os

from models.products_data import AdminInfo, Product
from helpers.auth_helper import create_access_token, get_current_user
from db.database import get_async_db


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
base_dir = os.path.dirname(os.path.abspath(__file__))

request_counts = {}

# üîπ –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å AdminRouter, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—à–∏—Ä—è–µ—Ç APIRouter
class AdminRouter(APIRouter):
    def __init__(self):
        super().__init__()
        self.add_api_route("/admin/login", self.login_page, methods=["GET"])
        self.add_api_route(
            "/admin/login", self.login, 
            methods=["POST"],
            )
        self.add_api_route("/admin/logout", self.logout, methods=["GET"])


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
base_dir = os.path.dirname(os.path.abspath(__file__))
templates_dir = os.path.abspath(os.path.join(base_dir, "../../assets/PP"))

# –£–∫–∞–∑–∞–Ω–∏–µ –ø—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤
templates = Jinja2Templates(directory=templates_dir)

# –ö–ª–∞—Å—Å —Å –±–∞–∑–æ–≤—ã–º–∏ —Å—Ç—Ä–∞–Ω–∏—á–∫–∞–º–∏! –ö–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
class PageRoutes(APIRouter):
    def __init__(self):
        super().__init__()

        self.templates = templates

        self.add_api_route("/plohoy.shop", 
                           self.products_all, 
                           methods=["GET"], 
                           response_class=HTMLResponse
                           )
        self.add_api_route("/About", 
                           self.about, 
                           methods=["GET"], 
                           response_class=HTMLResponse
                           )        
        self.add_api_route("/terms-of-service", 
                           self.terms_serv, 
                           methods=["GET"], 
                           response_class=HTMLResponse
                           )  
        self.add_api_route("/product", 
                           self.product, 
                           methods=["GET"], 
                           response_class=HTMLResponse
                           )

    async def products_all(self, request: Request):
        return self.templates.TemplateResponse("product.html", {"request": request})

    async def about(self, request: Request):
        return self.templates.TemplateResponse("about.html", {"request": request})
        
    async def terms_serv(self, request: Request):
        return self.templates.TemplateResponse("Terms_of_Service.html", {"request": request})

    async def product(self, request: Request):
        return self.templates.TemplateResponse("product.html", {"request": request})

# –ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π –∏ —Ç–æ–≤–∞—Ä–∞–º–∏.
class CartLogic(APIRouter):
    def __init__(self):
        super().__init__()
        self.templates = templates

        self.add_api_route("/admin/products", 
                           self.admin_products, 
                           methods=["GET"], 
                           response_class=HTMLResponse
                           )
        self.add_api_route("/admin/products/add", 
                           self.add_product, 
                           methods=["POST"]
                           )
        self.add_api_route("/admin/edit-or-no", 
                           self.edit_or_no, 
                           methods=["GET"]
                           )
        self.add_api_route("/admin/products/delete/{product_id}", 
                           self.delete_product, 
                           methods=["DELETE"]
                           )
        self.add_api_route("/admin/products/edit/{product_id}", 
                           self.edit_product, 
                           methods=["POST"]
                           )

    async def admin_products(self, 
                             request: Request, 
                             db: AsyncSession = Depends(get_async_db), 
                             current_user: str = Depends(get_current_user)
                             ):
        result = await db.execute(select(Product))
        products = result.scalars().all()
        return self.templates.TemplateResponse("admin_products.html", 
                                               {
                                                "request": request, 
                                                "products": products
                                                }
                                               )

    async def add_product(self, 
                          name: str = Form(...), 
                          price: int = Form(...), 
                          quantity: int = Form(...),\
                          db: AsyncSession = Depends(get_async_db), 
                          current_user: str = Depends(get_current_user)
                           ):
        result = await db.execute(select(Product).filter(Product.name == name))
        if result.scalars().first():
            response = RedirectResponse(url="/admin/edit-or-no", 
                                        status_code=303
                                        )
            return response
        add_product = Product(name=name, price=price, quantity=quantity)
        db.add(add_product)
        await db.commit()
        await db.refresh(add_product)
        return HTMLResponse(
                    """
            <!DOCTYPE html>
            <html lang="ru">
            <head>
                <meta charset="UTF-8">
                <title>–£—Å–ø–µ—Ö</title>
            </head>
            <body>
                <h2 style="color: green;">‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!</h2>
                <a href="/admin/products">–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤</a>
            </body>
            </html>
            """
        )

    async def edit_or_no(self, request:Request):
            return HTMLResponse(
                """
                <!DOCTYPE html>
                <html lang="ru">
                <head>
                    <meta charset="UTF-8">
                    <title>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</title>
                </head>
                <body>
                    <h2>–î–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</h2>
                    <–ø>–í—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-–ª–∏–±–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–µ–º –∏–ª–∏ –∂–µ –Ω–µ—Ç?</–ø>
                    
                    <form action="/edit-product" method="get">
                        <button type="submit">Yes</button>
                    </form>
                    
                    <form action="/admin/products" method="get">
                        <button type="submit">No</button>
                    </form>
                </body>
                </html>
                """
                )
    
    async def delete_product(self, 
                             product_id: int, 
                             request: Request, 
                             db: AsyncSession = Depends(get_async_db), 
                             current_user: str = Depends(get_current_user)
                             ):
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ ID
        result = await db.execute(select(Product).filter(Product.id == product_id))
        product = result.scalars().first()
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        if not product:
            raise HTTPException(status_code=404, detail="Product not found")
        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await db.delete(product)
        await db.commit()
        # return RedirectResponse(url="/admin/products", status_code=303)
        return JSONResponse(content={"message": "Product deleted successfully"})

    

    async def edit_product(self, 
                           product_id: int, 
                           name: str = Form(...), 
                           price: int = Form(...), 
                           quantity: int = Form(...), 
                           db: AsyncSession = Depends(get_async_db)
                           ):
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        result = await db.execute(select(Product).filter(Product.id == product_id))
        product = result.scalars().first()
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        if not product:
            raise HTTPException(status_code=404, detail="Product not found")
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        product.name = name
        product.price = price
        product.quantity = quantity
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.commit()
        await db.refresh(product)
        return RedirectResponse(url="/admin/products", status_code=303)

    

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
admin_router = AdminRouter()
static_routes = PageRoutes()
cart_logic = CartLogic()